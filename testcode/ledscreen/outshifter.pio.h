// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// outshifter //
// ---------- //

#define outshifter_wrap_target 0
#define outshifter_wrap 11

static const uint16_t outshifter_program_instructions[] = {
            //     .wrap_target
    0x90a0, //  0: pull   block           side 0     
    0x600c, //  1: out    pins, 12                   
    0xa042, //  2: nop                               
    0x6064, //  3: out    null, 4                    
    0xb842, //  4: nop                    side 1     
    0xa042, //  5: nop                               
    0xb042, //  6: nop                    side 0     
    0x600c, //  7: out    pins, 12                   
    0xa042, //  8: nop                               
    0x6064, //  9: out    null, 4                    
    0xb842, // 10: nop                    side 1     
    0xa042, // 11: nop                               
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program outshifter_program = {
    .instructions = outshifter_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config outshifter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + outshifter_wrap_target, offset + outshifter_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void outshifter_program_init(PIO pio, uint sm, uint offset, uint pins, uint clkpin )
{			
	pio_sm_config c = outshifter_program_get_default_config(offset);
    pio_gpio_init(pio, clkpin);
    for (int i=0;i<12;i++) pio_gpio_init(pio, pins+i);
    pio_sm_set_consecutive_pindirs(pio, sm, clkpin, 1, true);	
  	pio_sm_set_consecutive_pindirs(pio, sm, pins, 12, true);	
	sm_config_set_out_pins(&c, pins, 12); // rgb1, rgb2
    sm_config_set_sideset_pins(&c, clkpin); // clkpin
	sm_config_set_clkdiv(&c, 1.0);
	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

#endif
